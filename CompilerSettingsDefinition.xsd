<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="compiler">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="target">
          <xs:complexType>
            <xs:choice>
              <xs:sequence>
                <xs:element name="min" maxOccurs="1">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:pattern value="\d+\.\d+(\.\d+)?"/>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="max">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:pattern value="\d+\.\d+(\.\d+)?"/>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="mismatch-policy" minOccurs="0">
                  <xs:annotation>
                    <xs:documentation>
                      This tag provides instructions on how to proceed if the min and max version have differing pack version. 
                      If omitted, the compiler will prompt the user to validate whether to abort, use min or use max. Valid values are: "lowest", "highest"
                    </xs:documentation>
                  </xs:annotation>
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:enumeration value="lowest">
                        <xs:annotation>
                          <xs:documentation>Instructs the compiler to use the pack version that's associated with the min version.</xs:documentation>
                        </xs:annotation>
                      </xs:enumeration>
                      <xs:enumeration value="highest">
                        <xs:annotation>
                          <xs:documentation>Instructs the compiler to use the pack version that's associated with the max version.</xs:documentation>
                        </xs:annotation>
                      </xs:enumeration>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
              </xs:sequence>
              <xs:element name="exact">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:pattern value="\d+\.\d+(\.\d+)?"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="defines" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="define" minOccurs="1">
                <xs:complexType>
                  <xs:attribute name="name" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>Defines the name of the token. Must be provided else a compilation error will be thrown</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="value" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>Defines the value of the token. if omitted, the default will be "1" without the quotes.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="dependencies" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Use this element to define several dependencies. The compiler will resolve those dependencies by searching GitHub's respositories.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="dependency" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="owner" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Here goes the username of the repository owner. Required field</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="repository" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Here goes the name of the dependency's repository. Required field</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="version" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>
                          Here goes either the release tag or the short hash of the associated commit.
                          If the version is set as "{commit}-snapshot" where {commit} is replaced with the shorthash of the targeted commit, 
                          the compiler fetches the sources of the targeted commit saves tat information in the dependency cache.
                          If omitted, 
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="scope">
                      <xs:annotation>
                        <xs:documentation>This tag specifies the scope of the dependency. If omitted, "provided" will be assumed. Valid values are: "compile", "provided"</xs:documentation>
                      </xs:annotation>
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="compile">
                            <xs:annotation>
                              <xs:documentation>Includes the source files of this dependency into the compilation process. The dependency will not have to be present when the project is run in Minecraft.</xs:documentation>
                            </xs:annotation>
                          </xs:enumeration>
                          <xs:enumeration value="provided">
                            <xs:annotation>
                              <xs:documentation>Asserts that the dependency is present when the compiled project is run in Minecraft.</xs:documentation>
                            </xs:annotation>
                          </xs:enumeration>
                       </xs:restriction>
                      </xs:simpleType>
                   </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <!--<xs:element name="build">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="entry-points" minOccurs="0">
                <xs:complexType>
                  <xs:sequence maxOccurs="unbounded">
                    <xs:element name="function" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="loops" minOccurs="0">
                <xs:complexType>
                  <xs:sequence maxOccurs="unbounded">
                    <xs:element name="function" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="output">
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>-->
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>